@using Dictionary.Common.DTOs.Commands.EntryComment.Create
@using Dictionary.Common.DTOs.Queries.EntryComment.GetEntryComment

<textarea @bind="@Comment"></textarea>
<button @onclick="AddComment">Add Comment</button>

<br />

@foreach (var item in commentsPagination)
{

    <b>@item.User.Name</b>
    <p>@item.Content</p>
    <i>@item.CreateDate</i>
    <hr />
}
<br />
<br />
<nav aria-label="Page navigation example">
    <ul class="pagination">
        @for (int i = 0; i < CountList; i++)
        {
            int currenPage = i + 1;
            <li class="page-item"><a @onclick="()=> GetCommentPagination(currenPage,5)" class="page-link">@currenPage</a></li>
        }

    </ul>
</nav>
@* <select @onchange="OnChange">
    @for (int i = 0; i < CountList; i++)
    {
        <option value="@(i+1)">@(i + 1)</option>
    }
</select> *@

@code {

    public string Comment { get; set; }

    [Parameter]
    public int Id { get; set; }



    [Inject]
    protected IHttpService httpService { get; set; }

    public decimal CountList { get; set; }
    public decimal CurrenPage { get; set; }

    public void GetCommentPagination(int page,int pageSize)
    {
       
        commentsPagination = comments.Skip((((int)page) * pageSize) - pageSize).Take(pageSize).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetEntryCommentsAsync(Id);
        if (comments is not null)
            commentsPagination = comments.Skip(0).Take(5).ToList();

        CountList = Math.Ceiling((decimal)(comments.Count / 5));
    }
    public List<GetEntryCommentQueryResponse> comments { get; set; }
    public List<GetEntryCommentQueryResponse> commentsPagination { get; set; }

    protected async Task GetEntryCommentsAsync(int id)
    {
        comments = await httpService.GetAsync<List<GetEntryCommentQueryResponse>>($"https://localhost:7155/api/EntryComment/GetCommentsEntryById?EntryId={id}");




    }


    protected async Task AddComment()
    {
        await httpService.PostAsync<EntryCommentCommandRequest, EntryCommentCommandResponse>($"https://localhost:7155/api/EntryComment/Create", new EntryCommentCommandRequest { Content = Comment, EntryId = Id, UserId = 1 });
        await OnInitializedAsync();
    }

}

